generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  displayName String?
  settings    Settings?
  problems    Problem[]
}

model Settings {
  userId             String             @id
  operation          Operation
  operandLengths     Int[]
  problemsPerSet     Int
  inputDirection     InputDirection
  showProblemNumber  Boolean
  showTimer          Boolean
  timerDisplayTime   TimerDisplayTime
  showAbortButton    Boolean
  reverseKeypad      Boolean
  keypadZeroPosition KeypadZeroPosition

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Problem {
  id             String    @id @default(cuid())
  userId         String
  operation      Operation
  operandLengths Int[]
  operands       Int[]
  centiseconds   Int
  timestamp      DateTime  @db.Timestamptz(3)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Operation {
  ADDITION
  SUBTRACTION
  MULTIPLICATION
  DIVISION
}

enum InputDirection {
  RIGHT_TO_LEFT
  LEFT_TO_RIGHT
}

enum TimerDisplayTime {
  SET_TIME
  PROBLEM_TIME
}

enum KeypadZeroPosition {
  ZERO_LAST
  ZERO_FIRST
}
